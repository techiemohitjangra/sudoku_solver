const std = @import("std");
const sudoku = @import("sudoku.zig");
const expect = std.testing.expect;

pub fn main() !void {
    var game: sudoku.Sudoku = sudoku.Sudoku{ .difficulty = sudoku.GameDifficulty.Hard };
    game.init();
    game.print();
    game.solve();
    game.print();
}

test "game test" {
    var game = sudoku.Sudoku{ .state = [sudoku.GRID_SIZE][sudoku.GRID_SIZE]sudoku.SudokuCell{
        [sudoku.GRID_SIZE]sudoku.SudokuCell{ sudoku.SudokuCell{ .value = 3, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 6, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 5, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 8, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 4, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable } },
        [sudoku.GRID_SIZE]sudoku.SudokuCell{ sudoku.SudokuCell{ .value = 5, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 2, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable } },
        [sudoku.GRID_SIZE]sudoku.SudokuCell{ sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 8, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 7, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 3, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 1, .type = sudoku.CellType.Fixed } },
        [sudoku.GRID_SIZE]sudoku.SudokuCell{ sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 3, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 1, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 8, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable } },
        [sudoku.GRID_SIZE]sudoku.SudokuCell{ sudoku.SudokuCell{ .value = 9, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 8, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 6, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 3, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 5, .type = sudoku.CellType.Fixed } },
        [sudoku.GRID_SIZE]sudoku.SudokuCell{ sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 5, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 9, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 6, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable } },
        [sudoku.GRID_SIZE]sudoku.SudokuCell{ sudoku.SudokuCell{ .value = 1, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 3, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 2, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 5, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable } },
        [sudoku.GRID_SIZE]sudoku.SudokuCell{ sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 7, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 4, .type = sudoku.CellType.Fixed } },
        [sudoku.GRID_SIZE]sudoku.SudokuCell{ sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 5, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 2, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 6, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 3, .type = sudoku.CellType.Fixed }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable }, sudoku.SudokuCell{ .value = 0, .type = sudoku.CellType.Variable } },
    } };
    game.solve();
    try expect(game.isSolved());
}
